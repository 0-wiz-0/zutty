/* -*- C++ -*-
 * This file is part of Zutty.
 * Copyright (C) 2020 Tom Szilagyi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * See the file LICENSE for the full license.
 */

#include <sstream>

namespace zutty {

   inline uint32_t
   Frame::getIdx (uint16_t pY, uint16_t pX)
   {
      if (pY < marginTop || pY >= marginBottom)
         return nCols * pY + pX;

      pY += scrollHead - marginTop;
      if (pY >= marginBottom)
          pY -= marginBottom - marginTop;

      return nCols * pY + pX;
   }

   inline CharVdev::Cell &
   Frame::getCell (uint16_t pY, uint16_t pX)
   {
      return operator [] (getIdx (pY, pX));
   }

   inline CharVdev::Cell &
   Frame::operator [] (uint32_t idx)
   {
#ifdef DEBUG
      if (cells == nullptr)
         throw std::runtime_error ("cell accessor: no cell storage!");

      if ((unsigned) nRows * nCols <= idx)
      {
         std::ostringstream oss;
         oss << "Frame[" << idx << "] out of bounds, nCols="
             << nCols << ", nRows=" << nRows << ", number of cells: "
             << nCols * nRows;
         throw std::runtime_error (oss.str ());
      }
#endif
      return cells.get () [idx];
   }

   inline void
   Frame::copyCells (uint32_t dstIx, uint32_t srcIx, uint32_t count)
   {
      memcpy (cells.get () + dstIx, cells.get () + srcIx,
              count * sizeof (CharVdev::Cell));
      damage.add (dstIx, dstIx + count);
   }

   inline void
   Frame::moveCells (uint32_t dstIx, uint32_t srcIx, uint32_t count)
   {
      memmove (cells.get () + dstIx, cells.get () + srcIx,
               count * sizeof (CharVdev::Cell));
      damage.add (dstIx, dstIx + count);
   }

} // namespace zutty
